# This script will create regeneration scripts for all functions, views and stored procedures.
# This is useful to avoid that functions and procedures don't get refreshed and that views aren't broken.

# Note: if you are using potentially large materialized views, or views schema bound for other reasons, this might be time consuming during deployment and would required you to drop the schema bounds views before applying the changes!

$scriptpath = $MyInvocation.MyCommand.Path
$projectdir = resolve-path "$scriptpath\..\..\Template"
write-host "$scriptpath -- $projectdir"

#region Object types

class ObjectType {
    [ValidateSet('FUNCTION', 'VIEW', 'PROCEDURE')][string]$Keyword
    [string]$DirectoryName
    [int]$SortOrder
    [string] GetDropStatement([string] $schema, [string] $name) {
        $dropStatement =
@"
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.{0} WHERE {1}_NAME='$name' AND {1}_SCHEMA='$schema')
DROP $($this.Keyword) [$schema].[$name];
GO
"@
        $informationSchemaKeywords = switch ($this.Keyword) {
            'VIEW' {
                "VIEWS", "TABLE"
            }
            Default {
                "ROUTINES", "ROUTINE"
            }
        }

        return $dropStatement -f $informationSchemaKeywords
    }
}

# Define object types.
$function = [ObjectType]::new();
$function.Keyword = 'FUNCTION'
$function.DirectoryName = 'Functions'
$function.SortOrder = 0

$view = [ObjectType]::new();
$view.Keyword = 'VIEW'
$view.DirectoryName = 'Views'
$view.SortOrder = 1

$procedure = [ObjectType]::new();
$procedure.Keyword = 'PROCEDURE'
$procedure.DirectoryName = 'Stored Procedures'
$procedure.SortOrder = 2

[ObjectType[]]$objectTypes = @()
$objectTypes += $function
$objectTypes += $view
$objectTypes += $procedure

#endregion

#region Begin/end blocks

# Begin transaction block - Places a range lock on the data set, then starts the transaction.
$beginblock = @"
---- THIS SCRIPT WAS GENERATED BY AN AUTOMATED TOOL AS PART OF THE PRE BUILD STEP OF Template_DBUP ----
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRANSACTION ViewsProc;

create table #tempdate(starttime datetime not null);
INSERT INTO #tempdate values (getdate());
GO

"@ 

# End transaction block - Removes objects created by users, then commits the transaction.
$endblock = @"
DECLARE @starttime datetime, @command nvarchar(max) = NULL;
SELECT @starttime = starttime from #tempdate;
DECLARE viewsprocsDrop cursor local fast_forward FOR
SELECT N'DROP PROCEDURE [' + SCHEMA_NAME(schema_id) + N'].[' + [name] + N']' command from sys.objects where [type] = 'P' AND is_ms_shipped <> 1 AND create_date < @starttime AND SCHEMA_NAME(schema_id)
UNION ALL
SELECT N'DROP VIEW [' + SCHEMA_NAME(schema_id) + N'].[' + [name] + N'] ' command from sys.objects where [type] = 'V' AND is_ms_shipped <> 1  AND create_date < @starttime AND SCHEMA_NAME(schema_id)
UNION ALL
SELECT N'DROP FUNCTION [' + SCHEMA_NAME(schema_id) + N'].[' + [name] + N'] ' command from sys.objects where [type] = 'FN' AND is_ms_shipped <> 1  AND create_date < @starttime AND SCHEMA_NAME(schema_id)
UNION ALL
SELECT N'DROP FUNCTION [' + SCHEMA_NAME(schema_id) + N'].[' + [name] + N'] ' command from sys.objects where [type] = 'TF' AND is_ms_shipped <> 1  AND create_date < @starttime AND SCHEMA_NAME(schema_id)
UNION ALL
SELECT N'DROP FUNCTION [' + SCHEMA_NAME(schema_id) + N'].[' + [name] + N'] ' command from sys.objects where [type] = 'IF' AND is_ms_shipped <> 1  AND create_date < @starttime AND SCHEMA_NAME(schema_id)
DROP TABLE #tempdate
open viewsprocsDrop	
FETCH from viewsprocsDrop into @command
while (@@fetch_status = 0)
BEGIN
	execute (@command)
	FETCH from viewsprocsDrop into @command
END

close viewsprocsDrop
deallocate viewsprocsDrop 

COMMIT TRANSACTION ViewsProc;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
GO
"@

#endregion

# Remove and recreate file modules.sql.
$viewsProcsFileName = 'modules.sql'
$viewsProcsFilePath = "$scriptpath\..\Idempotent\$viewsProcsFileName"
if (test-path $viewsProcsFilePath) {
    Remove-Item $viewsProcsFilePath
}
New-Item $viewsProcsFilePath -ItemType File -Force | Out-Null

# Add begin transaction block.
$beginblock | Out-File $viewsProcsFilePath -Append -Encoding utf8

# Add drop/create scripts for each object type.
$objectTypes | Sort-Object SortOrder | ForEach-Object {
    $objectType = $_

    $filePaths = Get-ChildItem $projectdir -Recurse -Include $objectType.DirectoryName `
        | Get-ChildItem -Recurse -Filter '*.sql' `
        | Sort-Object FullName

    foreach ($filePath in $filePaths) {
        $schema = $filePath.Directory.Parent.Name
        # Drop the object if it exists.
        $objectType.GetDropStatement($schema, $filePath.BaseName) | Out-File $viewsProcsFilePath -Append -Encoding utf8
        # (re)Create the object with the current definition.
        Get-Content $filePath.FullName | Out-File $viewsProcsFilePath -Append -Encoding utf8
        Add-Content $viewsProcsFilePath "GO`r`n"
    }
}

# Add end transaction block.
$endblock | Out-File $viewsProcsFilePath -Append -Encoding utf8
